# -*- coding: utf-8 -*-
"""pytorch_lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UAX9ZxiEcDHoZY8clXTq7C3T56G4w08o
"""

import torch
from torch import nn
from torch.utils.data import DataLoader
from torchvision import datasets
from torchvision.transforms import ToTensor
# for viewing images v
import matplotlib.pyplot as plt

# downloading data
training_data = datasets.FashionMNIST(
    root="data",
    train=True,
    download=True,
    transform=ToTensor(),
    # a tensor is like a numpy ndarray, but can run on other devices
)

test_data = datasets.FashionMNIST(
    root="data",
    train=False,
    download=True,
    transform=ToTensor(),
)

# transform modifies samples
# target_transform modifies labels

batch_size = 64

# dataloaders create iterables over the datasets
train_dataloader = DataLoader(training_data, batch_size=batch_size)
test_dataloader = DataLoader(test_data, batch_size=batch_size)

for X, y in test_dataloader:
    print(f"Shape of X [N, C, H, W]: {X.shape}")
    print(f"Shape of y: {y.shape} {y.dtype}")
    break

# select device
device = (
    "cuda"
    if torch.cuda.is_available()
    else "mps"
    if torch.backends.mps.is_available()
    else "cpu"
)
print(f"Using {device} device")

# this class is a subset of the nn.Module superset
class NeuralNetwork(nn.Module):
    def __init__(self):
        super().__init__()          # instantiating the superset
        self.flatten = nn.Flatten() # flatten function is same as superset
        self.linear_relu_stack = nn.Sequential(
            nn.Linear(28*28, 512),  # first layer
            nn.ReLU(),
            nn.Linear(512, 512),    # second layer
            nn.ReLU(),
            nn.Linear(512, 10)      # final output layer
        )

    def forward(self, x):                  # forward propagation
        x = self.flatten(x)                # flattening the data
        logits = self.linear_relu_stack(x) # creating logits from data
        return logits

model = NeuralNetwork().to(device)
print(model) # printing our model structure!

loss_fn = nn.CrossEntropyLoss()
# optimizer = torch.optim.SGD(model.parameters(), lr=1e-3) # backprop selection
optimizer = torch.optim.Adam(model.parameters(), lr=1e-3) # adam optimizer!

def train(dataloader, model, loss_fn, optimizer):
    size = len(dataloader.dataset)
    model.train() # runs the forward fn defined earlier
    for batch, (X, y) in enumerate(dataloader): # iterate over dataloader
        X, y = X.to(device), y.to(device) # convert to i/o neurons

        # compute prediction error
        pred = model(X)
        loss = loss_fn(pred, y)

        # backpropagation using our selected loss function
        loss.backward()
        optimizer.step()
        optimizer.zero_grad() # zero the optimizer for the next batch

        if batch % 100 == 0: # print the current loss evrey 100 iter
            loss, current = loss.item(), (batch + 1) * len(X)
            print(f"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]")

def test(dataloader, model, loss_fn):
    size = len(dataloader.dataset)
    num_batches = len(dataloader)
    model.eval()
    test_loss, correct = 0, 0
    with torch.no_grad():
        for X, y in dataloader:
            X, y = X.to(device), y.to(device)
            pred = model(X)
            test_loss += loss_fn(pred, y).item()
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()
    test_loss /= num_batches
    correct /= size
    print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")

# actually running the model!
epochs = 5
for t in range(epochs):
    print(f"Epoch {t+1}\n-------------------------------")
    train(train_dataloader, model, loss_fn, optimizer)
    test(test_dataloader, model, loss_fn)
print("Done!")

classes = [
    "T-shirt/top",
    "Trouser",
    "Pullover",
    "Dress",
    "Coat",
    "Sandal",
    "Shirt",
    "Sneaker",
    "Bag",
    "Ankle boot",
]

model.eval()

plt.figure(figsize=(9,9))

for i in range(9):
    plt.subplot(3, 3, i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    x, y = test_data[i][0], test_data[i][1]
    plt.imshow(x[0], cmap=plt.cm.binary)

    with torch.no_grad():
        x = x.to(device)
        pred = model(x)
        predicted, actual = classes[pred[0].argmax(0)], classes[y]
        # print(f'Predicted: "{predicted}", Actual: "{actual}"')
        plt.xlabel(predicted)

plt.show()